/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2017 Fabian Mastenbroek, Christian Slothouber,
 * Earth Grob, Matthijs Rijm, Bas Musters
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath "com.badlogicgames.gdx:gdx-tools:1.9.6"
	}
}

group 'nl.tudelft.broccoli'
version '1.0-SNAPSHOT'

apply plugin: 'application'
apply from: "${project.rootDir}/gradle/java.gradle"

mainClassName = "nl.tudelft.broccoli.libgdx.DesktopLauncher"

dependencies {
	compile project(':broccoli-core')
	compile "com.badlogicgames.gdx:gdx:1.9.6"

	testCompile 'junit:junit:4.12'
	testCompile 'org.assertj:assertj-core:3.8.0'
	testCompile "com.badlogicgames.gdx:gdx-backend-headless:1.9.6"
	testCompile "org.mockito:mockito-core:1.+"
}

// An array containing the input directory of the packer,
// the output directory and the name of the texture atlas.
project.ext.texturePacker = ["sprites", "atlas", "sprites"]

// Import the texture packer
import com.badlogic.gdx.tools.texturepacker.TexturePacker

// Add a new task that packs the textures for you
task pack() {
	def input = file("${project.projectDir}/src/main/resources/${texturePacker[0]}")
	def output = file("${project.projectDir}/src/main/resources/${texturePacker[1]}")
	// Only run the packer on file changes
	inputs.dir input
	outputs.dir output

	doLast {
		if (project.ext.has('texturePacker')) {
			logger.info "Calling TexturePacker: " + texturePacker
			TexturePacker.process(input.getAbsolutePath(), output.getAbsolutePath(), texturePacker[2])
		}
	}
}

// Pack sprites during the processing of resources
processResources.dependsOn pack
